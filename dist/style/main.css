/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
	 ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
	 ========================================================================== */
a,
p,
span,
button {
  font-family: 'Poppins', sans-serif; }

li {
  list-style: none; }

h1,
h2,
h3 {
  font-family: 'Libre Baskerville', serif; }

/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
  text-decoration: none; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
	 ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
	 ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
	 ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
	 ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
	 ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

.mobile_menu_open {
  overflow: hidden;
  position: fixed;
  height: 100vh; }

header {
  position: relative;
  padding: 10px 0; }
  header .menu {
    text-align: right; }
  header .logo_with_nav {
    display: flex;
    justify-content: space-between;
    align-items: center; }
  header .logo {
    width: 100%;
    max-width: 97px;
    margin-left: 25px; }
  header .menu__icon {
    display: block;
    width: 45px;
    height: 35px;
    position: relative;
    cursor: pointer; }
    header .menu__icon span {
      display: block;
      position: absolute;
      height: 5px;
      width: 100%;
      background: #000;
      border-radius: 10px;
      opacity: 1;
      left: 0;
      transform: rotate(0deg);
      transition: .25s ease-in-out; }
    header .menu__icon span:nth-child(1) {
      top: 0; }
    header .menu__icon span:nth-child(2),
    header .menu__icon span:nth-child(3) {
      top: 13px; }
    header .menu__icon span:nth-child(4) {
      top: 26px; }
  header .nav {
    display: none; }
  header .menu__links-item {
    display: inline-block;
    font-weight: 500;
    padding: 0 10px;
    cursor: pointer; }
    header .menu__links-item a {
      font-size: 14px;
      color: #272727;
      transition: color 1s linear; }
      @media screen and (max-width: 768px) {
        header .menu__links-item a {
          color: #fff; } }
      header .menu__links-item a:hover {
        color: #a7a7a7;
        transition: color 0.3s ease-in-out; }
  header .nav_content {
    padding-bottom: 10px; }
  header .show .menu__icon span:nth-child(1) {
    top: 18px;
    width: 0%;
    left: 50%; }
  header .show .menu__icon span:nth-child(2) {
    transform: rotate(45deg); }
  header .show .menu__icon span:nth-child(3) {
    transform: rotate(130deg); }
  header .show .menu__icon span:nth-child(4) {
    top: 18px;
    width: 0%;
    left: 50%; }
  header .show .nav {
    display: block; }
  header .show .menu__links {
    position: fixed;
    height: 100vh;
    top: 0;
    right: 0;
    left: 0;
    margin-top: 70px;
    background-color: black;
    z-index: 1000;
    overflow: auto;
    padding: 20% 15px 20%;
    display: flex;
    flex-direction: column; }
  header .show .menu__links-item {
    display: block;
    padding: 10px 0;
    text-align: center; }
  @media (min-width: 768px) {
    header .menu__icon {
      display: none; }
    header .nav {
      display: block; }
    header .menu__links {
      display: flex;
      flex-wrap: wrap;
      justify-content: center; }
    header .logo {
      margin: 0 30px 0 0; } }

h1 {
  padding: 0 0 10%;
  color: #fff; }
  @media screen and (min-width: 1024px) {
    h1 {
      padding-bottom: 44px; } }

img {
  width: 100%; }

.wrapper {
  position: relative;
  overflow: hidden; }

.container {
  max-width: 1170px;
  margin: 0 auto;
  padding: 0 15px 0; }

.banner {
  background: #3f4049 url(https://i.postimg.cc/C172J9m4/bg-01.png) no-repeat center top;
  background-size: cover;
  text-align: center; }

.banner_title {
  height: 100vh;
  width: 100vw;
  display: table-cell;
  vertical-align: middle;
  margin: 0 auto;
  padding: 10px 0 10px; }
  @media screen and (min-width: 1024px) {
    .banner_title {
      height: 755px;
      padding: 7px 0 13px; } }
  .banner_title .icon {
    width: 38px;
    height: 38px;
    margin: 0 auto;
    margin-bottom: 20px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center; }
    @media screen and (min-width: 1024px) {
      .banner_title .icon {
        margin-bottom: 30px; } }
  .banner_title .first-item {
    color: #38c695; }
    .banner_title .first-item a {
      color: #38c695;
      transition: color 1s linear; }
    .banner_title .first-item a:hover {
      color: #71efc4; }
  .banner_title .first-icon {
    border: 2px solid #38c695; }
  .banner_title .second-icon {
    border: 2px solid #b27cf5; }
  .banner_title .second-item {
    color: #b27cf5; }
    .banner_title .second-item a {
      color: #b27cf5;
      transition: color 1s linear; }
    .banner_title .second-item a:hover {
      color: #cfacfa; }
  .banner_title .third-icon {
    border: 2px solid #feb960; }
  .banner_title .third-item {
    color: #feb960; }
    .banner_title .third-item a {
      color: #feb960;
      transition: color 1s linear; }
    .banner_title .third-item a:hover {
      color: #ffe0b8; }
  .banner_title .item {
    padding-bottom: 20px; }
    .banner_title .item a {
      font-weight: 500;
      text-transform: uppercase; }
    @media screen and (min-width: 700px) {
      .banner_title .item {
        font-size: 1.3em;
        padding-bottom: 0;
        margin: 0 46px 0; } }
  @media screen and (min-width: 700px) {
    .banner_title .items {
      display: flex;
      justify-content: center; } }

.btn {
  border: none;
  background: #fc5f45;
  padding: 14px 43px;
  border-radius: 30px;
  color: #fff;
  text-transform: uppercase;
  font-weight: 600;
  transition: background-color 1s linear;
  margin-bottom: 10%;
  font-size: 1.1em; }
  @media screen and (min-width: 1024px) {
    .btn {
      margin-bottom: 81px; } }

.btn:hover {
  background: #fa816d; }

.about_us {
  padding: 148px 10px 10px; }
  .about_us .image_with_text_wrap {
    display: flex;
    justify-content: space-between;
    align-items: center; }
    .about_us .image_with_text_wrap .image_wrap {
      margin-left: 26px;
      min-width: 535px;
      min-height: 680px;
      border: 10px solid #ccc;
      background-image: linear-gradient(to top, rgba(217, 172, 165, 0.5), rgba(204, 204, 204, 0.3)), url(https://i.postimg.cc/TYRJnpnb/image-01.png); }
    .about_us .image_with_text_wrap .title_with_text {
      position: relative;
      width: 100%;
      max-width: 652px;
      height: 557px;
      padding: 10px 15px 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); }
      .about_us .image_with_text_wrap .title_with_text .numeral {
        position: absolute;
        top: -105px;
        left: -11px;
        bottom: 0; }
      .about_us .image_with_text_wrap .title_with_text h2,
      .about_us .image_with_text_wrap .title_with_text p {
        position: relative;
        z-index: 200; }

.numeral {
  font-size: 278px;
  font-weight: 700;
  color: #e0e0e0; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
